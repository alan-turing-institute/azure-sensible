---

- name: configure vm
  hosts: vm

  vars_files:
    - ansible_vars.yaml

  vars:
    users: []
    apt_packages: []
    totp: false
    docker: false
    docker_users: []

  roles:
    - role: oefenweb.fail2ban
      become: yes
      vars:
        fail2ban_services:
          - name: sshd
            maxretry: 5
            bantime: 1h
    - role: dev-sec.ssh-hardening
      become: yes
      vars:
        ssh_server_password_login: false
        ssh_permit_root_login: "no"
        ssh_use_pam: false
        ssh_challengeresponseauthentication: false
        sshd_authenticationmethods: publickey
        sftp_enabled: true
        ssh_print_last_log: true
      when: not totp
    - role: dev-sec.ssh-hardening
      become: yes
      vars:
        ssh_server_password_login: false
        ssh_permit_root_login: "no"
        ssh_use_pam: true
        ssh_challengeresponseauthentication: true
        sshd_authenticationmethods: "publickey,keyboard-interactive:pam"
        ssh_server_match_user:
          - user: "{{ ansible_user }}"
            rules: ["AuthenticationMethods publickey"]
        sftp_enabled: true
        ssh_print_last_log: true
      when: totp

  tasks:
    - name: Wait for cloud init to finish
      wait_for:
        path: /var/lib/cloud/instance/boot-finished

    - name: Configure users
      block:
        - name: Create users
          user:
            name: "{{ item.username }}"
            comment: "{{ item.name }}"
            state: present
          loop: "{{ users }}"
          when: item.enabled

        - name: Disable users
          user:
            name: "{{ item.username }}"
            comment: "{{ item.name }}"
            state: absent
          loop: "{{ users }}"
          when: not item.enabled

        - name: Add users public keys
          authorized_key:
            user: "{{ item.username }}"
            key: "{{ lookup('file', item.keyfile) }}"
            state: present
          loop: "{{ users }}"
          when: item.enabled

        - name: Add admin users to the admin group
          user:
            name: "{{ item.username }}"
            append: true
            groups: admin
          loop: "{{ users }}"
          when: item.admin and item.enabled
      become: yes

    - name: Allow users in the admin group to sudo without a password
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%ADMIN ALL='
        line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'
        validate: /usr/sbin/visudo -cf %s
      become: yes
      when: not totp

    - name: Configure TOTP authentication
      block:
        - name: Install PAM OATH packages for TOTP
          become: yes
          apt:
            name:
              - libpam-oath
              - oathtool
            state: present

        - name: Find users with existing TOTP seeds
          become: yes
          command: "grep {{ item.username }} /etc/users.oath"
          loop: "{{ users }}"
          register: totp_users
          ignore_errors: yes
          changed_when: no

        - name: Create TOTP seeds for each user without one
          become: yes
          lineinfile:
            path: /etc/users.oath
            line: "HOTP/T30/6 {{ item.item.username }} - {{ lookup ('password', '/dev/null chars=hexdigits length=30') }}"
            create: yes
            owner: root
            mode: 0600
          loop: "{{ totp_users.results }}"
          when: item.failed

        - name: Enable OATH for SSH login in PAM configuration
          become: yes
          lineinfile:
            path: /etc/pam.d/sshd
            state: present
            line: 'auth [success=done new_authtok_reqd=done default=die] pam_oath.so usersfile=/etc/users.oath window=30 digits=6'
            insertbefore: BOF
            mode: 0644

        - name: Require OATH for sudo
          become: yes
          lineinfile:
            path: /etc/pam.d/sudo
            state: present
            # nullok is required for users without TOTP configured, e.g. ansible_user
            line: 'auth [success=done new_authtok_reqd=done default=die] pam_oath.so usersfile=/etc/users.oath window=30 digits=6 nullok'
            insertbefore: BOF
            mode: 0644

        - name: Register TOTP hashes to a variable
          become: yes
          shell: sed -E "s:HOTP/T30/6 (\S+) - ([0-9a-fA-F]{30}).*:\1 \2:g" /etc/users.oath
          args:
            warn: false
          when: users is defined
          register: totp_hashes
          changed_when: no

        - name: Write TOTP hashes to file
          copy:
            content: "{{ totp_hashes.stdout }}"
            dest: ./totp_hashes.txt
            mode: 0644
          delegate_to: localhost
          when: users is defined
      when: totp

    # This is run after users are created so that they may be added to the docker group
    - name: Install and configure docker
      become: yes
      import_role:
        name: geerlingguy.docker
      when: docker

    - name: Install selected packages
      apt:
        name: "{{ apt_packages }}"
        state: present
        update_cache: yes
      become: yes

    - name: Print IP address
      debug:
        var: ansible_host
