---

- name: configure vm
  hosts: vm

  vars_files:
    - ansible_vars.yaml
    - terraform_vars.yaml

  vars:
    # Default variables
    users: []
    users_deleted: []
    apt_packages: []
    snap_packages: []
    pip_packages: []
    totp: false
    docker: false
    docker_users: []
    # Pip packages required for community.docker.* modules
    docker_pip_packages:
      - name: docker
      - name: docker-compose
    # SSH configuration with and without TOTP
    auth: "{{ 'totp' if totp else 'no_totp' }}"
    ssh_vars:
      ssh_challengeresponseauthentication:
        totp: true
        no_totp: false
      sshd_authenticationmethods:
        totp: "publickey,keyboard-interactive:pam"
        no_totp: publickey
      ssh_server_match_user:
        totp:
          - user: "{{ ansible_user }}"
            rules: ["AuthenticationMethods publickey"]
        no_totp: false

  collections:
    - devsec.hardening

  pre_tasks:
    - name: Wait for cloud init to finish
      ansible.builtin.wait_for:
        path: /var/lib/cloud/instance/boot-finished

    - name: Update apt cache
      become: yes
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 600

  roles:
    - role: oefenweb.fail2ban
      become: yes
      vars:
        fail2ban_services:
          - name: sshd
            maxretry: 5
            bantime: 1h

    - role: devsec.hardening.ssh_hardening
      become: yes
      vars:
        sftp_enabled: true
        ssh_print_last_log: true
        ssh_print_pam_motd: true
        ssh_challengeresponseauthentication: "{{ ssh_vars.ssh_challengeresponseauthentication[auth] }}"
        sshd_authenticationmethods: "{{ ssh_vars.sshd_authenticationmethods[auth] }}"
        ssh_server_match_user: "{{ ssh_vars.ssh_server_match_user[auth] }}"

    - role: geerlingguy.docker
      become: yes
      when: docker

    - role: geerlingguy.pip
      become: yes
      vars:
        pip_install_packages: "{{ pip_packages | union(docker_pip_packages) if docker else pip_packages }}"

  tasks:
    - name: Configure users
      become: yes
      block:
        - name: Create users
          ansible.builtin.user:
            name: "{{ item.username }}"
            comment: "{{ item.name }}"
            password: "{{ item.password | default(omit) }}"
            groups: "{{ item.groups | default(omit) }}"
            append: "{{ item.append | default(omit) }}"
          loop: "{{ users }}"

        - name: Deploy users SSH keys
          ansible.posix.authorized_key:
            user: "{{ item.0.username }}"
            key: "{{ item.1 }}"
            exclusive: no
          loop: "{{ users | subelements('ssh_key') }}"

        - name: Disable or remover users
          ansible.builtin.user:
            name: "{{ item.username }}"
            state: absent
            force: yes
            remove: "{{ item.remove | default('no') }}"
          loop: "{{ users_deleted }}"

    - name: Configure data disk
      block:
        - name: Partition disk
          become: yes
          community.general.parted:
            device: /dev/disk/azure/scsi1/lun0
            label: gpt
            number: 1
            state: present
          register: data_disk

        - name: Create ext4 file system
          become: yes
          community.general.filesystem:
            device: "{{ data_disk.disk.dev }}1"
            fstype: ext4

        - name: Mount data partition
          become: yes
          ansible.posix.mount:
            path: "/shared"
            state: mounted
            src: /dev/disk/azure/scsi1/lun0-part1
            fstype: ext4
            opts: defaults,nofail
            passno: "2"

        - name: Create group for shared work
          become: yes
          ansible.builtin.group:
            name: shared
            system: yes
            state: present

        - name: Add all users to the shared group
          become: yes
          ansible.builtin.user:
            name: "{{ item.username }}"
            groups: shared
            append: true
          loop: "{{ users }}"

        - name: Configure shared directory
          become: yes
          ansible.builtin.file:
            path: /shared
            state: directory
            owner: root
            group: shared
            mode: u=rwx,g=rwx,o=rx,g+s

        - name: Ensure setfacl and getfacl are installed
          become: yes
          ansible.builtin.apt:
            name: acl
            state: present

        - name: Set group permissions for new files in shared data directory
          become: yes
          ansible.posix.acl:
            path: /shared
            etype: group
            default: yes
            permissions: rw
            state: present
      when: data_disk_size_gb | int > 0

    - name: Configure TOTP authentication
      tags: totp
      block:
        - name: Install PAM OATH packages for TOTP
          become: yes
          ansible.builtin.apt:
            name:
              - libpam-oath
              - oathtool
            state: present

        - name: Create OATH users file if it does not exist
          become: yes
          ansible.builtin.file:
            path: /etc/users.oath
            state: touch
            owner: root
            group: root
            mode: 0600
            modification_time: preserve
            access_time: preserve

        - name: Configure OATH entries for users
          become: yes
          pam_oath_user:
            name: "{{ item.username }}"
            secret: "{{ lookup('password', '/dev/null chars=0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f length=40') }}"
            state: present
            update_secret: on_create
          loop: "{{ users }}"

        - name: Enable OATH for SSH login in PAM configuration
          become: yes
          ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            state: present
            line: 'auth [success=done new_authtok_reqd=done default=die] pam_oath.so usersfile=/etc/users.oath window=30 digits=6'
            insertbefore: BOF
            mode: 0644

        - name: Require OATH for sudo
          become: yes
          ansible.builtin.lineinfile:
            path: /etc/pam.d/sudo
            state: present
            # nullok is required for users without TOTP configured, e.g. ansible_user
            line: 'auth [success=done new_authtok_reqd=done default=die] pam_oath.so usersfile=/etc/users.oath window=30 digits=6 nullok'
            insertbefore: BOF
            mode: 0644

        - name: Register TOTP secrets to a variable
          become: yes
          ansible.builtin.shell: sed -E "s:HOTP/T30/6\s+(\S+)\s+-\s+([0-9a-fA-F]+)\s:\1 \2:g" /etc/users.oath
          args:
            warn: false
          when: users is defined
          register: totp_hashes
          changed_when: no

        - name: Write TOTP secrets to file
          ansible.builtin.copy:
            content: "{{ totp_hashes.stdout }}"
            dest: ./totp_hashes.txt
            mode: 0644
          delegate_to: localhost
          when: users is defined
      when: totp

    - name: Install apt packages
      become: yes
      ansible.builtin.apt:
        name: "{{ apt_packages }}"
        state: present

    - name: Install snap packages
      become: yes
      community.general.snap:
        name: "{{ item.name }}"
        classic: "{{ item.classic | default(omit) }}"
        state: present
      loop: "{{ snap_packages }}"

    - name: Print IP address
      debug:
        var: ansible_host
